{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","CONTRACT_ADDRESS","App","useState","setWalletError","nftLink","setNftLink","minted","setMinted","mintCount","setMintCount","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNFT","abi","on","from","tokenId","toNumber","Number","warn","error","connectWallet","alert","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","href","alt","src","twitterLogo","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ae8ea0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNFT from \"./utils/MyEpicNFT.json\";\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/assets\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x007594b7888FD59aF7eC9d260A28b07f40E448E9\"; // 05.12\n\nconst App = () => {\n\tconst [walletError, setWalletError] = useState(false);\n\tconst [nftLink, setNftLink] = useState(null);\n\tconst [minted, setMinted] = useState(false);\n\tconst [mintCount, setMintCount] = useState(0);\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tsetWalletError(true);\n\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tsetWalletError(false);\n\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\tsetCurrentAccount(account);\n\t\t\tsetupEventListener();\n\t\t} else {\n\t\t\tconsole.log(\"No authorized account found\");\n\t\t}\n\t};\n\n\tconst setupEventListener = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNFT.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tconnectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n\t\t\t\t\tsetNftLink(\n\t\t\t\t\t\t`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t\t\t);\n\t\t\t\t\tsetMintCount(Number(tokenId) + 1);\n\t\t\t\t\tsetMinted(true);\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\"+++++++ NFT Link:\",\n\t\t\t\t\t\t`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconsole.log(\"Setup event listener!\");\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Fancy method to request access to account.\n\t\t\t */\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Boom! This should print out public address once we authorize Metamask.\n\t\t\t */\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst askContractToMintNft = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tsetMinted(false);\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNFT.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tconsole.log(\"Going to pop wallet now to pay gas...\");\n\t\t\t\tlet nftTxn = await connectedContract.makeAnEpicNFT();\n\n\t\t\t\tconsole.log(\"Mining...please wait.\");\n\t\t\t\tawait nftTxn.wait();\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\n\t\tif (currentAccount !== \"\") {\n\t\t\tsetupEventListener();\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">My NFT Collection</p>\n\t\t\t\t\t<p className=\"sub-text\">\n\t\t\t\t\t\tEach unique. Each beautiful. Discover your NFT today.\n\t\t\t\t\t</p>\n\n\t\t\t\t\t{currentAccount === \"\" ? (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={connectWallet}\n\t\t\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tConnect to Wallet\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={askContractToMintNft}\n\t\t\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMint NFT\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{minted && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<a href={nftLink} className=\"cta-button connect-wallet-button\">\n\t\t\t\t\t\t\t\tCheck Your NFT on Opensea\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<p className=\"sub-text\">\n\t\t\t\t\t\t\t\tMinted NFTs: {mintCount} / {TOTAL_MINT_COUNT}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built on @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}